String -> HashCode -> Index

NOTE: The Hashcode is not the index in the Array!
We actually map from the key to the hashcode to the index, i.e. a hashcode maps towards the index.
This is because say our array may not be of greater size (as Hashcode can be large hence no point in making it index)

Two or more Strings can have the same hashcode, hence they will get added at the same index. This is called COLLISION.
We can remove collision by different methods.
One way is chaining i.e. Make an array of Linked lists.

Hashmap vs Hashtable
1. HashMap is non synchronized. It is not-thread safe and can’t be shared between many threads without proper
synchronization code whereas Hashtable is synchronized. It is thread-safe and can be shared with many threads.
2. HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value.
3. HashMap is generally preferred over HashTable if thread synchronization is not needed

Why HashTable doesn’t allow null and HashMap does?
To successfully store and retrieve objects from a HashTable, the objects used as keys must implement the hashCode
method and the equals method. Since null is not an object, it can’t implement these methods. HashMap is an advanced
version and improvement on the Hashtable. HashMap was created later.
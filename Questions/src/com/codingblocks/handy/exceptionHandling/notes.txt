A Java exception is an object that describes an exceptional (that is, error) condition
that has occurred in a piece of code. When an exceptional condition arises, an object representing that exception is
created and thrown in the method that caused the error.

Java exception handling is managed via five keywords: try, catch, throw, throws, and finally.

All exception types are subclasses of the built-in class Throwable.

Immediately below Throwable are two subclasses that partition exceptions into two distinct branches :
-Exception : This is also the class that you will subclass to create your own custom exception types.
    -There is an important subclass of Exception, called RuntimeException :
    Exceptions of this type are automatically defined for the programs that you write and include things.
    Ex : division by zero and invalid array indexing.

-Error : defines exceptions that are not expected to be caught under normal circumstances by your program.
         Exceptions of type Error are used by the Java run-time system to indicate errors having to do with the run-time
         environment, itself. Ex: Stack overflow

The class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this
class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java statement.
Similarly, only this class or one of its subclasses can be the argument type in a clause.

Any exception that is not caught by your program will ultimately be processed by the default handler.
The default handler displays a string describing the exception, prints a stack trace from the point at which the
exception occurred, and terminates the program.

Throwable overrides the toString() method (defined by Object) so that it returns a string containing a description of
the exception. You can display this description in a println() statement by simply passing the exception as an argument.

throw :
throw ThrowableInstance;
Here, ThrowableInstance must be an object of type Throwable or a subclass of Throwable.
Primitive types, such as int or char, as well as non-Throwable classes, such as String and Object,
cannot be used as exceptions.

throws :
If a method is capable of causing an exception that it does not handle, it must specify this behavior so that callers of
the method can guard themselves against that exception. You do this by including a throws clause in the method’s
declaration. A throws clause lists the types of exceptions that a method might throw.
This is necessary for all exceptions, except those of type Error or RuntimeException, or any of their subclasses.

finally :
finally creates a block of code that will be executed after a try / catch block has completed and before the code
following the try/catch block.
The finally block will execute whether or not an exception is thrown.
Any time a method is about to return to the caller from inside a try/catch block, via an uncaught exception or an
explicit return statement, the finally clause is also executed just before the method returns.

Java’s Built-in Exceptions :
-Unchecked Exceptions : The most general of these exceptions are subclasses of the standard type RuntimeException.
These exceptions need not be included in any method’s throws list. In the language of Java, these are called unchecked
exceptions because the compiler does not check to see if a method handles or throws these exceptions.
-Checked Exceptions : Those exceptions defined by java.lang that must be included in a method’s throws list if that
method can generate one of these exceptions and does not handle it itself.

Chained Exceptions :
The chained exception feature allows you to associate another exception with an exception.
This second exception describes the cause of the first exception.

To allow chained exceptions, two constructors and two methods were added to Throwable.
Throwable(Throwable causeExc) : causeExc is the exception that causes the current exception.
Throwable(String msg, Throwable causeExc) : Allows you to specify a description at the same time that you specify a
                                            cause exception.
These two constructors have also been added to the Error, Exception, and RuntimeException classes.

The chained exception methods supported by Throwable are getCause( ) and initCause( ).

The getCause( ) method returns the exception that underlies the current exception.
If there is no underlying exception, null is returned.

The initCause( ) method associates causeExc with the invoking exception and returns a reference to the exception.
Thus, you can associate a cause with an exception after the exception has been created. However, the cause exception
can be set only once. Thus, you can call initCause( ) only once for each exception object. Furthermore, if the cause
exception was set by a constructor, then you can’t set it again using initCause( ).


Multi-Catch :
The multi-catch feature allows two or more exceptions to be caught by the same catch clause.
To use a multi-catch, separate each exception type in the catch clause with the OR operator. Each multi-catch parameter
is implicitly final. (You can explicitly specify final, if desired, but it is not necessary.) Because each multi-catch
parameter is implicitly final, it can’t be assigned a new value.


An annotation is created through a mechanism based on the interface.

// A simple annotation type.
@interface MyAnno {
    String str();
    int val();
}

@ : This tells the compiler that an annotation type is being declared.

All annotations consist solely of method declarations.
However, you donâ€™t provide bodies for these methods. Instead, Java implements these methods.

An annotation cannot include an extends clause.
However, all annotation types automatically extend the Annotation interface.
Thus, Annotation is a super-interface of all annotations.
-It is declared within the java.lang.annotation package.
-It overrides hashCode( ), equals( ), and toString( ), which are defined by Object.
-It also specifies annotationType( ), which returns a Class object that represents the invoking annotation.

When you apply an annotation, you give values to its members.
For example, here is an example of MyAnno being applied to a method declaration:

// Annotate a method.
@MyAnno(str = "Annotation Example", val = 100)
public static void myMeth() { // ...

This annotation is linked with the method myMeth( ).
In the example, the string "Annotation Example" is assigned to the str member of MyAnno.

Specifying a Retention Policy : A retention policy determines at what point an annotation is discarded.
Java defines three such policies, which are encapsulated within the java.lang.annotation.RetentionPolicy enumeration :
-SOURCE  : Retained only in the source file and is discarded during compilation.
-CLASS   : Stored in the .class file during compilation. However, it is not available through the JVM during run time.
-RUNTIME : Stored in the .class file during compilation and is available through the JVM during run time.
Thus, RUNTIME retention offers the greatest annotation persistence.

NOTE : An annotation on a local variable declaration is not retained in the .class file.

Example :
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnno {
    String str();
    int val();
}
Thus, MyAnno will be available to the JVM during program execution.

Reflection : (java.lang.reflect)
Reflection is the feature that enables information about a class to be obtained at run time.

getClass() :
General Form : final Class<?> getClass( )
It returns the Class object that represents the invoking object.

getMethod() :
General Form : Method getMethod(String methName, Class<?> ... paramTypes)
The name of the method is passed in methName. If the method has arguments, then Class objects representing those types
must also be specified by paramTypes.
Ex: FOR :- void myMeth(String str, int i) :
Method m = c.getMethod("myMeth", String.class, int.class);

getAnnotation( ) :
General Form : <A extends Annotation> getAnnotation(Class<A> annoType)
annoType is a Class object that represents the annotation in which you are interested.
The method returns a reference to the annotation.
Ex : MyAnno anno = m.getAnnotation(MyAnno.class);
NOTE : The method returns null if the annotation is not found, which will be the case if the annotation does not have
RUNTIME retention.

The AnnotatedElement Interface : (java.lang.reflect)
Implemented by the classes Method, Field, Constructor, Class, and Package, among others.
-getAnnotation()
-getAnnotations()
-getDeclaredAnnotations() : It returns all non-inherited annotations present in the invoking object.
-isAnnotationPresent( )
-getAnnotationsByType( )
-getDeclaredAnnotationsByType( )

Marker Annotations :
A marker annotation is a special kind of annotation that contains no members. Its sole purpose is to mark an item.

Single-Member Annotations :
A single-member annotation contains only one member. It works like a normal annotation except that it allows a shorthand
form of specifying the value of the member.However,in order to use this shorthand, the name of the member must be value.
Ex :
@interface MySingle {
  int value(); // NOTE : this variable name must be value
}
.
.
@MySingle(10)

The Built-In Annotations :
java.lang.annotation :
-@Retention : A retention policy determines at what point an annotation is discarded.

-@Documented: The documented annotation indicates that an annotation with this type should be documented by the javadoc
 tool. By default, annotations are not included in javadoc. But if @Documented is used, it then will be processed by
 javadoc-like tools and the annotation type information will also be included in the generated document.

-@Target    : The @Target annotation specifies the types of items to which an annotation can be applied.

-@Inherited : @Inherited is a marker annotation that can be used only on another annotation declaration.
It signals that a custom Java annotation used in a class should be inherited by subclasses inheriting from that class.

java.lang :
-@Override : A method annotated with @Override must override a method from a superclass.

-@Deprecated : @Deprecated is a marker annotation.
It indicates that a declaration is obsolete and has been replaced by a newer form.

-@FunctionalInterface : @FunctionalInterface is a marker annotation.
It indicates that the annotated interface is a functional interface.

-@SafeVarargs : @SafeVarargs is a marker annotation that can be applied to methods and constructors.
It indicates that no unsafe actions related to a varargs parameter occur.
It must be applied only to vararg methods or constructors that are static or final.

-@SuppressWarnings : Specifies that one or more warnings that might be issued by the compiler are to be suppressed.


Type Annotations :
For example, you can annotate the return type of a method, the type of this within a method, a cast, array levels,
an inherited class, and a throws clause.

A type annotation must include ElementType.TYPE_USE as a target.

A type annotation applies to the type that the annotation precedes.
For Example :
void myMeth() throws @TypeAnno NullPointerException { // ...

You can also annotate the type of this (called the receiver).
Beginning with JDK 8, you can explicitly declare this as the first parameter to a method.
In this declaration, the type of this must be the type of its class; for example:
class SomeClass {
  int myMeth(SomeClass this, int i, int j) { // ...

So, int myMeth(@TypeAnno SomeClass this, int i, int j) { // ...

NOTE : You cannot annotate a return type of void.






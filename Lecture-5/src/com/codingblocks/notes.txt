String is probably the most commonly used class in Java’s class library.

Look up Newton's square root method

The first thing to understand about strings is that every string you create is actually an object of type String.
Even string constants are actually String objects. For example, in the statement
       System.out.println("This is a String, too");
the string "This is a String, too" is a String object.

The second thing to understand about strings is that objects of type String are immutable.

String is not an array of characters. We cannot do line[0]

String are immutable in java

In string builder, only one object is made, and the changes are done in that object only.
The reference is also the same and isn't changed.

When we do sout: ex: sout(34)
it will run toString() method on the input no matter what.
i.e.          System.out.println(builder);
             System.out.println(builder.toString());
                both are same

String builder is a separate datatype. command click on string builder
it will show that StringBuilder is a separate class.

Java’s string type, called String, is not a primitive type. Nor is it simply an array of characters.
Rather, String defines an object.
The String type is used to declare string variables. You can also declare arrays of strings.
A quoted string constant can be assigned to a String variable. A variable of type String can be assigned to another
variable of type String. You can use an object of type String as an argument to println( ).

String str = "this is a test";
     System.out.println(str);
Here, str is an object of type String.


System.out.println("Hello" + new ArrayList<>()); // This works
System.out.println(new Integer(17) + "Hello"); // This works too

System.out.println(new ArrayList<>() + new Integer(17)); // This does not
The operator + is defined for primitives and when one side is a string,
but you can kind of get around this with an empty string first :
System.out.println("" + new ArrayList<>() + new Integer(17)); // This works

Command-line arguments:
One important use of strings in Java programming is to enable a mechanism for passing information from the command line
to the program. The mechanism is simple. When you type the java command followed by a library name followed by a
sequence of strings, the Java system invokes the main() method in that library with an array of strings as argument:
the strings typed after the library name.

printf() :
   float num = 123.2f;
   System.out.printf("Num is %.2f yeah", num);

Output :
Num is 123.20 yeah     // .2f is replaced by num

String value = String.format("PI is %.2f", Math.PI);
System.out.println(value);

System.out.println('b' + 'c');
System.out.println((char) ('a' + 4));

NOTE: When an int value is concatenated with a String, it is converted to an Integer that can invoke toString().

Primitives are stored in the call stack, which require less storage spaces and are cheaper to manipulate.
On the other hand, objects are stored in the program heap, which require complex memory management and more storage spaces.

The '+' operator, which performs addition on primitives (such as int and double), is overloaded to operate on String objects.
'+' performs concatenation for two String operands.
Java does not support operator overloading for software engineering consideration.
In a language that supports operator overloading like C++, you can turn a '+' operator to perform a subtraction,resulted
in poor codes.The'+'operator is the only operator that is internally overloaded to support string concatenation in Java.
Take note that '+' does not work on any two arbitrary objects, such as Points or Circles.

String literals are stored in a common pool. This facilitates sharing of storage for strings with the same contents to
conserve storage. String objects allocated via new operator are stored in the heap, and there is no sharing of storage
for the same contents.

If two string literals have the same contents, they will share the same storage inside the common pool.
This approach is adopted to conserve storage for frequently-used strings. On the other hand, String objects created via
the new operator and constructor are kept in the heap. Each String object in the heap has its own storage just like any
other object. There is no sharing of storage in heap even if two String objects have the same contents.

Since string literals with the same contents share storage in the common pool, Java's String is designed to be immutable.
That is, once a String is constructed, its contents cannot be modified. Otherwise, the other String references sharing
the same storage location will be affected by the change, which can be unpredictable and therefore is undesirable.

Performance :
Bad performance, if in a for loop we keep adding to a String, it is actually creating new string objects and copying the
old one then appending the new changes, O(N^2) for N iterations
StringBuilder makes changes at the original location in O(N) for N iterations